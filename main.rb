require 'net/http'
require 'uri'

class SimpleWebVulnerabilityScanner
  def initialize(target_url)
    @target_url = target_url
  end

  def scan
    puts "Starting scan on #{@target_url}"
    check_directory_listing
    check_server_info
    check_common_files
    check_http_methods
    check_sql_injection
    check_xss
    check_path_traversal
    check_http_header_injection
  end

  private

  def check_directory_listing
    uri = URI.parse(@target_url + '/')
    response = Net::HTTP.get(uri)

    if response.include?('<ul>') || response.include?('<ol>')
      puts "Directory listing found at #{@target_url}/"
    else
      puts "Directory listing not found at #{@target_url}/"
    end
  end

  def check_server_info
    uri = URI.parse(@target_url + '/server-info')
    response = Net::HTTP.get(uri)

    if response.include?('Server')
      puts "Server information disclosed at #{@target_url}/server-info"
    else
      puts "Server information not disclosed at #{@target_url}/server-info"
    end
  end

  def check_common_files
    common_files = ['readme.txt', 'readme.md', 'robots.txt', 'config.xml', 'backup.sql']

    common_files.each do |file|
      uri = URI.parse(@target_url + '/' + file)
      response = Net::HTTP.get(uri)

      if response.include?('404 Not Found')
        puts "#{file} not found at #{@target_url}/#{file}"
      else
        puts "#{file} found at #{@target_url}/#{file}"
      end
    end
  end

  def check_http_methods
    methods = ['TRACE', 'TRACK', 'DELETE', 'PUT', 'PATCH']

    methods.each do |method|
      uri = URI.parse(@target_url)
      request = Net::HTTP.new(uri.host, uri.port)
      path = uri.path.empty? ? '/' : uri.path # Default path to "/" if empty

      begin
        response = request.send_request(method, path)
        if response.code == '200'
          puts "#{method.upcase} method allowed at #{@target_url}"
        else
          puts "#{method.upcase} method not allowed at #{@target_url}"
        end
      rescue StandardError => e
        puts "Error testing #{method.upcase}: #{e.message}"
      end
    end
  end

  def check_sql_injection
    uri = URI.parse(@target_url + '/?id=1')
    response = Net::HTTP.get(uri)

    if response.include?('1')
      puts "SQL injection vulnerability found at #{@target_url}/?id=1"
    else
      puts "SQL injection vulnerability not found at #{@target_url}/?id=1"
    end
  end

  def check_xss
    uri = URI.parse(@target_url + '/?q=<script>alert(1)</script>')
    response = Net::HTTP.get(uri)

    if response.include?('<script>alert(1)</script>')
      puts "XSS vulnerability found at #{@target_url}/?q=<script>alert(1)</script>"
    else
      puts "XSS vulnerability not found at #{@target_url}/?q=<script>alert(1)</script>"
    end
  end

  def check_path_traversal
    uri = URI.parse(@target_url + '/../../../../etc/passwd')
    response = Net::HTTP.get(uri)

    if response.include?('root:')
      puts "Path traversal vulnerability found at #{@target_url}/../../../../etc/passwd"
    else
      puts "Path traversal vulnerability not found at #{@target_url}/../../../../etc/passwd"
    end
  end

  def check_http_header_injection
    headers = {
      'X-Forwarded-For' => '127.0.0.1, 192.168.1.1',
      'X-Forwarded-Host' => 'example.com',
      'X-Original-URI' => '/admin'
    }

    uri = URI.parse(@target_url)
    request = Net::HTTP::Get.new(uri.path.empty? ? '/' : uri.path)
    headers.each do |key, value|
      request[key] = value
    end

    response = Net::HTTP.start(uri.host, uri.port) { |http| http.request(request) }

    if response.code == '200'
      puts "HTTP header injection vulnerability found at #{@target_url}"
    else
      puts "HTTP header injection vulnerability not found at #{@target_url}"
    end
  end
end

if __FILE__ == $0
  target_url = ARGV[0] || 'http://example.com'
  scanner = SimpleWebVulnerabilityScanner.new(target_url)
  scanner.scan
end
